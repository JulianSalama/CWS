package controllers.lib

import java.security.MessageDigest

import scala.collection.mutable.HashMap

import org.apache.commons.codec.binary.Hex

import play.api._
import play.api.mvc._
import play.api.libs.iteratee.Enumerator

import org.squeryl.PrimitiveTypeMode._


import controllers._
import models._

import views._

import play.api.libs.ws._
import scala.concurrent.Future
import play.libs.Json
import scala.concurrent._
import scala.concurrent.duration._
import scala.concurrent.Await
import play.api.libs.concurrent.Execution.Implicits._

import play.api.libs.json._
import play.api.libs.functional.syntax._

import java.net.URLDecoder


trait Withs {

//  def WithFacebookValidation()(f: Request[AnyContent] => SimpleResult) {
//    Action { implicit request => {
//       f(request)
//    } }
//  }
}

object FBApiCalls {

  def isTokenValid(fbToken: String): Boolean = {
    /*
    *
    *
    * GET /debug_token?
    *    input_token={input-token}&
    *    access_token={app_id} | {app_secrete}
    * 
    **/
    val fbGetAppAccessToken = "https://graph.facebook.com/debug_token?" 
  
    val future: Future[Boolean] = WS.url(fbGetAppAccessToken).withQueryString("input_token" -> fbToken, "access_token" -> "784824731572342|2b382e7f1badb17895ff142fa30edcd1").get().map {
      response => {
	println(response.body)
	val json = response.json
	val isValid: Seq[JsValue] = (json \\ "is_valid")
	isValid.head.asOpt[JsValue] match {
	  case Some(s) => s.toString == "true"
	  case None => false
	}
      }
    }
    Await.result(future, 10 seconds): Boolean
  }

}
